# Importing Libraries
import sys
print("python is: {}".format(sys.version))
import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import cross_validate
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.metrics import classification_report, accuracy_score
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt

#  Importing/Reading data
url='https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data'
names=("id","Clump_Thickness","Uniform_Cell_Size","Uniform_Cell_Shape","Marginal_Adhesion","Single_Epithelial_Size","Bare_Nuclei","Bland_Chromatin","Normal_Nucleoli","Mitoses","Class")
df=pd.read_csv(url,names=names)

# Preprocessig Data
df.replace('?',-99999,inplace=True)
print(df.axes)
df.drop(['id'],axis=1,inplace=True)
print(df.shape)

# Exploring data visually
df.hist(figsize=(10,10))
scatter_matrix(df,figsize=(10,10))

# Model building: Support Vector Machine, KNearestNeighbors
# Splitting Dataset 

X=np.array(df.drop(['Class'],1))
y=np.array(df['Class'])
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,random_state=42)


#Creating Models
seed=8
scoring='accuracy'
models=[]
models.append(('KNN',KNeighborsClassifier(n_neighbors=5)))
models.append(('SVM',SVC()))
results=[]
names=[]

# Cross validation, measures of accuracy for SVM, KNN models
for name,model in models:
    kfold=model_selection.KFold(n_splits=10,random_state=seed)
    cv_results= model_selection.cross_val_score(model,X_train,y_train,cv=kfold,scoring=scoring)
    results.append(cv_results)
    names.append(name)
    msg= "%s: %f (%f)" % (name,cv_results.mean(),cv_results.std())
    print(msg)
    
# Mean Accuracy, Standard deviation of Models accuracy: 
  KNN: 0.964221 (0.025255)
  SVM: 0.957078 (0.021408)

# Classification report for KNN, SVM models
for name, model in models:
    model.fit(X_train, y_train)
    predictions=model.predict(X_test)
    print(name)
    print(accuracy_score(y_test,predictions))
    print(classification_report(y_test,predictions))

 # Final results in classifying the data
   Confusion Matrix of KNN Model:
   KNN
   Accuracy: 0.9857142857142858
              precision    recall  f1-score   support

           2       0.99      0.99      0.99        95
           4       0.98      0.98      0.98        45
  
   Confusion Matrix of SVM Model
    SVM
    0.95
              precision    recall  f1-score   support

           2       1.00      0.93      0.96        95
           4       0.87      1.00      0.93        45
